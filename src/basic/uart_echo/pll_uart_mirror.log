
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+932 (git sha1 f8d5920a, gcc 8.3.0-6+rpi1 -fPIC -Os)


-- Parsing `pll_uart_mirror.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: pll_uart_mirror.v
Parsing Verilog input from `pll_uart_mirror.v' to AST representation.
Generating RTLIL representation for module `\baud_tick_gen'.
Generating RTLIL representation for module `\uart_rx'.
Generating RTLIL representation for module `\uart_tx'.
Generating RTLIL representation for module `\top'.
Warning: wire '\LEDR_N' is assigned in a block at pll_uart_mirror.v:118.
Warning: wire '\LEDG_N' is assigned in a block at pll_uart_mirror.v:119.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json pll_uart_mirror.json' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \uart_tx
Used module:         \baud_tick_gen
Used module:     \uart_rx
Parameter 1 (\clk_freq) = 12000000
Parameter 2 (\baud) = 115200
Parameter 3 (\oversampling) = 8

2.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\baud_tick_gen'.
Parameter 1 (\clk_freq) = 12000000
Parameter 2 (\baud) = 115200
Parameter 3 (\oversampling) = 8
Generating RTLIL representation for module `$paramod\baud_tick_gen\clk_freq=12000000\baud=115200\oversampling=8'.
Parameter 1 (\clk_freq) = 12000000
Parameter 2 (\baud) = 115200

2.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\baud_tick_gen'.
Parameter 1 (\clk_freq) = 12000000
Parameter 2 (\baud) = 115200
Generating RTLIL representation for module `$paramod\baud_tick_gen\clk_freq=12000000\baud=115200'.
Parameter 1 (\clk_freq) = 42000000
Parameter 2 (\baud) = 115200

2.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\uart_tx'.
Parameter 1 (\clk_freq) = 42000000
Parameter 2 (\baud) = 115200
Generating RTLIL representation for module `$paramod\uart_tx\clk_freq=42000000\baud=115200'.
Parameter 1 (\clk_freq) = 42000000
Parameter 2 (\baud) = 115200

2.2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\uart_rx'.
Parameter 1 (\clk_freq) = 42000000
Parameter 2 (\baud) = 115200
Generating RTLIL representation for module `$paramod\uart_rx\clk_freq=42000000\baud=115200'.

2.2.6. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod\uart_tx\clk_freq=42000000\baud=115200
Used module:         \baud_tick_gen
Used module:     $paramod\uart_rx\clk_freq=42000000\baud=115200
Parameter 1 (\clk_freq) = 42000000
Parameter 2 (\baud) = 115200

2.2.7. Executing AST frontend in derive mode using pre-parsed AST for module `\baud_tick_gen'.
Parameter 1 (\clk_freq) = 42000000
Parameter 2 (\baud) = 115200
Generating RTLIL representation for module `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200'.
Parameter 1 (\clk_freq) = 42000000
Parameter 2 (\baud) = 115200
Parameter 3 (\oversampling) = 8

2.2.8. Executing AST frontend in derive mode using pre-parsed AST for module `\baud_tick_gen'.
Parameter 1 (\clk_freq) = 42000000
Parameter 2 (\baud) = 115200
Parameter 3 (\oversampling) = 8
Generating RTLIL representation for module `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8'.

2.2.9. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod\uart_tx\clk_freq=42000000\baud=115200
Used module:         $paramod\baud_tick_gen\clk_freq=42000000\baud=115200
Used module:     $paramod\uart_rx\clk_freq=42000000\baud=115200
Used module:         $paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8

2.2.10. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod\uart_tx\clk_freq=42000000\baud=115200
Used module:         $paramod\baud_tick_gen\clk_freq=42000000\baud=115200
Used module:     $paramod\uart_rx\clk_freq=42000000\baud=115200
Used module:         $paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8
Removing unused module `$paramod\baud_tick_gen\clk_freq=12000000\baud=115200'.
Removing unused module `$paramod\baud_tick_gen\clk_freq=12000000\baud=115200\oversampling=8'.
Removing unused module `\uart_tx'.
Removing unused module `\uart_rx'.
Removing unused module `\baud_tick_gen'.
Removed 5 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$uart_baud_tick_gen.v:43$267 in module $paramod\baud_tick_gen\clk_freq=42000000\baud=115200.
Marked 2 switch rules as full_case in process $proc$pll_uart_mirror.v:95$62 in module top.
Marked 1 switch rules as full_case in process $proc$uart_rx.v:129$248 in module $paramod\uart_rx\clk_freq=42000000\baud=115200.
Marked 1 switch rules as full_case in process $proc$uart_rx.v:96$240 in module $paramod\uart_rx\clk_freq=42000000\baud=115200.
Marked 1 switch rules as full_case in process $proc$uart_rx.v:70$222 in module $paramod\uart_rx\clk_freq=42000000\baud=115200.
Marked 2 switch rules as full_case in process $proc$uart_tx.v:57$211 in module $paramod\uart_tx\clk_freq=42000000\baud=115200.
Marked 1 switch rules as full_case in process $proc$uart_baud_tick_gen.v:43$272 in module $paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 15 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200.$proc$uart_baud_tick_gen.v:37$269'.
  Set init value: \acc = 18'000000000000000000
Found init rule in `\top.$proc$pll_uart_mirror.v:94$70'.
  Set init value: \data_check_busy = 1'0
Found init rule in `\top.$proc$pll_uart_mirror.v:93$69'.
  Set init value: \data_flag = 1'0
Found init rule in `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:128$264'.
  Set init value: \gap_cnt = 6'000000
Found init rule in `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:91$263'.
  Set init value: \os_cnt = 3'000
Found init rule in `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:69$262'.
  Set init value: \rx_bit = 1'1
Found init rule in `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:68$261'.
  Set init value: \filter_cnt = 2'11
Found init rule in `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:64$260'.
  Set init value: \rx_sync = 2'11
Found init rule in `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:58$259'.
  Set init value: \rx_state = 4'0000
Found init rule in `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:36$258'.
  Set init value: \rx_eop = 1'0
Found init rule in `$paramod\uart_tx\clk_freq=42000000\baud=115200.$proc$uart_tx.v:56$219'.
  Set init value: \tx_shift = 8'00000000
Found init rule in `$paramod\uart_tx\clk_freq=42000000\baud=115200.$proc$uart_tx.v:52$218'.
  Set init value: \tx_state = 4'0000
Found init rule in `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8.$proc$uart_baud_tick_gen.v:37$274'.
  Set init value: \acc = 18'000000000000000000

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200.$proc$uart_baud_tick_gen.v:37$269'.
Creating decoders for process `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200.$proc$uart_baud_tick_gen.v:43$267'.
     1/1: $0\acc[17:0]
Creating decoders for process `\top.$proc$pll_uart_mirror.v:94$70'.
Creating decoders for process `\top.$proc$pll_uart_mirror.v:93$69'.
Creating decoders for process `\top.$proc$pll_uart_mirror.v:95$62'.
     1/7: $0\data_check_busy[0:0]
     2/7: $0\data_flag[0:0]
     3/7: $0\data_buf[7:0]
     4/7: $0\tx1_data[7:0]
     5/7: $0\tx1_start[0:0]
     6/7: $0\LEDG_N[0:0]
     7/7: $0\LEDR_N[0:0]
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:128$264'.
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:91$263'.
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:69$262'.
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:68$261'.
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:64$260'.
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:58$259'.
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:36$258'.
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:135$253'.
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:129$248'.
     1/1: $0\gap_cnt[5:0]
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:121$244'.
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:114$242'.
     1/1: $0\rx_data[7:0]
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:96$240'.
     1/1: $0\rx_state[3:0]
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:92$233'.
     1/1: $0\os_cnt[2:0]
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:70$222'.
     1/2: $0\rx_bit[0:0]
     2/2: $0\filter_cnt[1:0]
Creating decoders for process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:65$221'.
     1/1: $0\rx_sync[1:0]
Creating decoders for process `$paramod\uart_tx\clk_freq=42000000\baud=115200.$proc$uart_tx.v:56$219'.
Creating decoders for process `$paramod\uart_tx\clk_freq=42000000\baud=115200.$proc$uart_tx.v:52$218'.
Creating decoders for process `$paramod\uart_tx\clk_freq=42000000\baud=115200.$proc$uart_tx.v:57$211'.
     1/2: $0\tx_shift[7:0]
     2/2: $0\tx_state[3:0]
Creating decoders for process `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8.$proc$uart_baud_tick_gen.v:37$274'.
Creating decoders for process `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8.$proc$uart_baud_tick_gen.v:43$272'.
     1/1: $0\acc[17:0]

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200.\acc' using process `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200.$proc$uart_baud_tick_gen.v:43$267'.
  created $dff cell `$procdff$438' with positive edge clock.
Creating register for signal `\top.\LEDR_N' using process `\top.$proc$pll_uart_mirror.v:95$62'.
  created $dff cell `$procdff$439' with positive edge clock.
Creating register for signal `\top.\LEDG_N' using process `\top.$proc$pll_uart_mirror.v:95$62'.
  created $dff cell `$procdff$440' with positive edge clock.
Creating register for signal `\top.\tx1_start' using process `\top.$proc$pll_uart_mirror.v:95$62'.
  created $dff cell `$procdff$441' with positive edge clock.
Creating register for signal `\top.\tx1_data' using process `\top.$proc$pll_uart_mirror.v:95$62'.
  created $dff cell `$procdff$442' with positive edge clock.
Creating register for signal `\top.\data_buf' using process `\top.$proc$pll_uart_mirror.v:95$62'.
  created $dff cell `$procdff$443' with positive edge clock.
Creating register for signal `\top.\data_flag' using process `\top.$proc$pll_uart_mirror.v:95$62'.
  created $dff cell `$procdff$444' with positive edge clock.
Creating register for signal `\top.\data_check_busy' using process `\top.$proc$pll_uart_mirror.v:95$62'.
  created $dff cell `$procdff$445' with positive edge clock.
Creating register for signal `$paramod\uart_rx\clk_freq=42000000\baud=115200.\rx_eop' using process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:135$253'.
  created $dff cell `$procdff$446' with positive edge clock.
Creating register for signal `$paramod\uart_rx\clk_freq=42000000\baud=115200.\gap_cnt' using process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:129$248'.
  created $dff cell `$procdff$447' with positive edge clock.
Creating register for signal `$paramod\uart_rx\clk_freq=42000000\baud=115200.\rx_ready' using process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:121$244'.
  created $dff cell `$procdff$448' with positive edge clock.
Creating register for signal `$paramod\uart_rx\clk_freq=42000000\baud=115200.\rx_data' using process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:114$242'.
  created $dff cell `$procdff$449' with positive edge clock.
Creating register for signal `$paramod\uart_rx\clk_freq=42000000\baud=115200.\rx_state' using process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:96$240'.
  created $dff cell `$procdff$450' with positive edge clock.
Creating register for signal `$paramod\uart_rx\clk_freq=42000000\baud=115200.\os_cnt' using process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:92$233'.
  created $dff cell `$procdff$451' with positive edge clock.
Creating register for signal `$paramod\uart_rx\clk_freq=42000000\baud=115200.\filter_cnt' using process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:70$222'.
  created $dff cell `$procdff$452' with positive edge clock.
Creating register for signal `$paramod\uart_rx\clk_freq=42000000\baud=115200.\rx_bit' using process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:70$222'.
  created $dff cell `$procdff$453' with positive edge clock.
Creating register for signal `$paramod\uart_rx\clk_freq=42000000\baud=115200.\rx_sync' using process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:65$221'.
  created $dff cell `$procdff$454' with positive edge clock.
Creating register for signal `$paramod\uart_tx\clk_freq=42000000\baud=115200.\tx_state' using process `$paramod\uart_tx\clk_freq=42000000\baud=115200.$proc$uart_tx.v:57$211'.
  created $dff cell `$procdff$455' with positive edge clock.
Creating register for signal `$paramod\uart_tx\clk_freq=42000000\baud=115200.\tx_shift' using process `$paramod\uart_tx\clk_freq=42000000\baud=115200.$proc$uart_tx.v:57$211'.
  created $dff cell `$procdff$456' with positive edge clock.
Creating register for signal `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8.\acc' using process `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8.$proc$uart_baud_tick_gen.v:43$272'.
  created $dff cell `$procdff$457' with positive edge clock.

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200.$proc$uart_baud_tick_gen.v:37$269'.
Found and cleaned up 1 empty switch in `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200.$proc$uart_baud_tick_gen.v:43$267'.
Removing empty process `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200.$proc$uart_baud_tick_gen.v:43$267'.
Removing empty process `top.$proc$pll_uart_mirror.v:94$70'.
Removing empty process `top.$proc$pll_uart_mirror.v:93$69'.
Found and cleaned up 5 empty switches in `\top.$proc$pll_uart_mirror.v:95$62'.
Removing empty process `top.$proc$pll_uart_mirror.v:95$62'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:128$264'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:91$263'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:69$262'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:68$261'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:64$260'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:58$259'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:36$258'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:135$253'.
Found and cleaned up 2 empty switches in `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:129$248'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:129$248'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:121$244'.
Found and cleaned up 1 empty switch in `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:114$242'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:114$242'.
Found and cleaned up 12 empty switches in `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:96$240'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:96$240'.
Found and cleaned up 1 empty switch in `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:92$233'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:92$233'.
Found and cleaned up 5 empty switches in `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:70$222'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:70$222'.
Found and cleaned up 1 empty switch in `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:65$221'.
Removing empty process `$paramod\uart_rx\clk_freq=42000000\baud=115200.$proc$uart_rx.v:65$221'.
Removing empty process `$paramod\uart_tx\clk_freq=42000000\baud=115200.$proc$uart_tx.v:56$219'.
Removing empty process `$paramod\uart_tx\clk_freq=42000000\baud=115200.$proc$uart_tx.v:52$218'.
Found and cleaned up 16 empty switches in `$paramod\uart_tx\clk_freq=42000000\baud=115200.$proc$uart_tx.v:57$211'.
Removing empty process `$paramod\uart_tx\clk_freq=42000000\baud=115200.$proc$uart_tx.v:57$211'.
Removing empty process `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8.$proc$uart_baud_tick_gen.v:37$274'.
Found and cleaned up 1 empty switch in `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8.$proc$uart_baud_tick_gen.v:43$272'.
Removing empty process `$paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8.$proc$uart_baud_tick_gen.v:43$272'.
Cleaned up 45 empty switches.

2.4. Executing FLATTEN pass (flatten design).
Using template $paramod\uart_rx\clk_freq=42000000\baud=115200 for cells of type $paramod\uart_rx\clk_freq=42000000\baud=115200.
Using template $paramod\uart_tx\clk_freq=42000000\baud=115200 for cells of type $paramod\uart_tx\clk_freq=42000000\baud=115200.
Using template $paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8 for cells of type $paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8.
Using template $paramod\baud_tick_gen\clk_freq=42000000\baud=115200 for cells of type $paramod\baud_tick_gen\clk_freq=42000000\baud=115200.
<suppressed ~4 debug messages>
No more expansions possible.
Deleting now unused module $paramod\baud_tick_gen\clk_freq=42000000\baud=115200.
Deleting now unused module $paramod\uart_rx\clk_freq=42000000\baud=115200.
Deleting now unused module $paramod\uart_tx\clk_freq=42000000\baud=115200.
Deleting now unused module $paramod\baud_tick_gen\clk_freq=42000000\baud=115200\oversampling=8.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~16 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 14 unused cells and 114 unused wires.
<suppressed ~15 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \urx1.gap_cnt = 6'000000 to constant driver in module top.
Promoting init spec \urx1.rx_eop = 1'0 to constant driver in module top.
Promoted 2 init specs to constant drivers.

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 7 unused wires.
<suppressed ~4 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $techmap\utx1.$procmux$400: { \utx1.tx_ready $techmap\utx1.$procmux$431_CMP $techmap\utx1.$procmux$428_CMP $techmap\utx1.$procmux$425_CMP $techmap\utx1.$procmux$422_CMP $techmap\utx1.$procmux$419_CMP $techmap\utx1.$procmux$416_CMP $techmap\utx1.$procmux$413_CMP $techmap\utx1.$procmux$410_CMP $techmap\utx1.$procmux$407_CMP $techmap\utx1.$procmux$404_CMP }
  Optimizing cells in module \top.
Performed a total of 1 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.23. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 4) from port B of cell top.$techmap\urx1.$procmux$369_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\urx1.$eq$uart_rx.v:123$245 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\urx1.$eq$uart_rx.v:93$238 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\utx1.$procmux$431_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\utx1.$procmux$404_CMP0 ($eq).
Removed top 29 bits (of 32) from port B of cell top.$techmap\utx1.$lt$uart_tx.v:87$215 ($lt).
Removed top 6 bits (of 18) from port B of cell top.$techmap\urx1.tickgen.$add$uart_baud_tick_gen.v:43$273 ($add).
Removed top 9 bits (of 18) from port B of cell top.$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268 ($add).

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$85776c5c8886d6853e5f553eb04c82905cd16745\_90_lut_cmp_ for cells of type $lt.
No more expansions possible.
<suppressed ~30 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $techmap\urx1.$add$uart_rx.v:77$226 ($add).
  creating $macc model for $techmap\urx1.$add$uart_rx.v:92$235 ($add).
  creating $macc model for $techmap\urx1.$sub$uart_rx.v:78$230 ($sub).
  creating $macc model for $techmap\urx1.tickgen.$add$uart_baud_tick_gen.v:43$273 ($add).
  creating $macc model for $techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268 ($add).
  creating $alu model for $macc $techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268.
  creating $alu model for $macc $techmap\urx1.tickgen.$add$uart_baud_tick_gen.v:43$273.
  creating $alu model for $macc $techmap\urx1.$sub$uart_rx.v:78$230.
  creating $alu model for $macc $techmap\urx1.$add$uart_rx.v:92$235.
  creating $alu model for $macc $techmap\urx1.$add$uart_rx.v:77$226.
  creating $alu cell for $techmap\urx1.$add$uart_rx.v:77$226: $auto$alumacc.cc:485:replace_alu$460
  creating $alu cell for $techmap\urx1.$add$uart_rx.v:92$235: $auto$alumacc.cc:485:replace_alu$463
  creating $alu cell for $techmap\urx1.$sub$uart_rx.v:78$230: $auto$alumacc.cc:485:replace_alu$466
  creating $alu cell for $techmap\urx1.tickgen.$add$uart_baud_tick_gen.v:43$273: $auto$alumacc.cc:485:replace_alu$469
  creating $alu cell for $techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268: $auto$alumacc.cc:485:replace_alu$472
  created 5 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.urx1.rx_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
    Circuit seems to be self-resetting.
Not marking top.utx1.tx_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing ICE40_WRAPCARRY pass (wrap carries).

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=11 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=1\Y_WIDTH=2 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=10\B_WIDTH=15\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=6\B_WIDTH=14\Y_WIDTH=15 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~430 debug messages>

2.32. Executing ICE40_OPT pass (performing simple optimizations).

2.32.1. Running ICE40 specific optimizations.

2.32.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~163 debug messages>

2.32.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~423 debug messages>
Removed a total of 141 cells.

2.32.4. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$1181 ($_DFF_P_) from module top.
Removing $auto$simplemap.cc:420:simplemap_dff$1180 ($_DFF_P_) from module top.
Replaced 2 DFF cells.

2.32.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 56 unused cells and 207 unused wires.
<suppressed ~57 debug messages>

2.32.6. Rerunning OPT passes. (Removed registers in this run.)

2.32.7. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$463.slice[0].carry: CO=\urx1.os_cnt [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$469.slice[0].carry: CO=\urx1.tickgen.acc [2]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$469.slice[15].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$472.slice[0].carry: CO=\utx1.tickgen.acc [3]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$472.slice[14].carry: CO=1'0

2.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~4 debug messages>

2.32.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.32.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.32.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.32.12. Rerunning OPT passes. (Removed registers in this run.)

2.32.13. Running ICE40 specific optimizations.

2.32.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.32.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.32.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.32.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.32.18. Finished OPT passes. (There is nothing left to do.)

2.33. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.34. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$577 to $_DFFE_PP_ for $0\LEDR_N[0:0] -> \LEDR_N.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$578 to $_DFFE_PP_ for $0\LEDG_N[0:0] -> \LEDG_N.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$579 to $_DFFE_PP_ for $0\tx1_start[0:0] -> \tx1_start.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$580 to $_DFFE_PP_ for $0\tx1_data[7:0] [0] -> \tx1_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$581 to $_DFFE_PP_ for $0\tx1_data[7:0] [1] -> \tx1_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$582 to $_DFFE_PP_ for $0\tx1_data[7:0] [2] -> \tx1_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$583 to $_DFFE_PP_ for $0\tx1_data[7:0] [3] -> \tx1_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$584 to $_DFFE_PP_ for $0\tx1_data[7:0] [4] -> \tx1_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$585 to $_DFFE_PP_ for $0\tx1_data[7:0] [5] -> \tx1_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$586 to $_DFFE_PP_ for $0\tx1_data[7:0] [6] -> \tx1_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$587 to $_DFFE_PP_ for $0\tx1_data[7:0] [7] -> \tx1_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$588 to $_DFFE_PP_ for $0\data_buf[7:0] [0] -> \data_buf [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$589 to $_DFFE_PP_ for $0\data_buf[7:0] [1] -> \data_buf [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$590 to $_DFFE_PP_ for $0\data_buf[7:0] [2] -> \data_buf [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$591 to $_DFFE_PP_ for $0\data_buf[7:0] [3] -> \data_buf [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$592 to $_DFFE_PP_ for $0\data_buf[7:0] [4] -> \data_buf [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$593 to $_DFFE_PP_ for $0\data_buf[7:0] [5] -> \data_buf [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$594 to $_DFFE_PP_ for $0\data_buf[7:0] [6] -> \data_buf [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$595 to $_DFFE_PP_ for $0\data_buf[7:0] [7] -> \data_buf [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$598 to $_DFFE_PP_ for $techmap\urx1.$0\rx_sync[1:0] [0] -> \urx1.rx_sync [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$599 to $_DFFE_PP_ for $techmap\urx1.$0\rx_sync[1:0] [1] -> \urx1.rx_sync [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$600 to $_DFFE_PP_ for $techmap\urx1.$0\rx_bit[0:0] -> \urx1.rx_bit.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$601 to $_DFFE_PP_ for $techmap\urx1.$0\filter_cnt[1:0] [0] -> \urx1.filter_cnt [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$602 to $_DFFE_PP_ for $techmap\urx1.$0\filter_cnt[1:0] [1] -> \urx1.filter_cnt [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$603 to $_DFFE_PP_ for $techmap\urx1.$0\os_cnt[2:0] [0] -> \urx1.os_cnt [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$604 to $_DFFE_PP_ for $techmap\urx1.$0\os_cnt[2:0] [1] -> \urx1.os_cnt [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$605 to $_DFFE_PP_ for $techmap\urx1.$0\os_cnt[2:0] [2] -> \urx1.os_cnt [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$610 to $_DFFE_PP_ for $techmap\urx1.$0\rx_data[7:0] [0] -> \urx1.rx_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$611 to $_DFFE_PP_ for $techmap\urx1.$0\rx_data[7:0] [1] -> \urx1.rx_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$612 to $_DFFE_PP_ for $techmap\urx1.$0\rx_data[7:0] [2] -> \urx1.rx_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$613 to $_DFFE_PP_ for $techmap\urx1.$0\rx_data[7:0] [3] -> \urx1.rx_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$614 to $_DFFE_PP_ for $techmap\urx1.$0\rx_data[7:0] [4] -> \urx1.rx_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$615 to $_DFFE_PP_ for $techmap\urx1.$0\rx_data[7:0] [5] -> \urx1.rx_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$616 to $_DFFE_PP_ for $techmap\urx1.$0\rx_data[7:0] [6] -> \urx1.rx_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$617 to $_DFFE_PP_ for $techmap\urx1.$0\rx_data[7:0] [7] -> \urx1.rx_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$944 to $_DFFE_PP_ for $techmap\utx1.$0\tx_shift[7:0] [0] -> \utx1.tx_shift [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$945 to $_DFFE_PP_ for $techmap\utx1.$0\tx_shift[7:0] [1] -> \utx1.tx_shift [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$946 to $_DFFE_PP_ for $techmap\utx1.$0\tx_shift[7:0] [2] -> \utx1.tx_shift [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$947 to $_DFFE_PP_ for $techmap\utx1.$0\tx_shift[7:0] [3] -> \utx1.tx_shift [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$948 to $_DFFE_PP_ for $techmap\utx1.$0\tx_shift[7:0] [4] -> \utx1.tx_shift [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$949 to $_DFFE_PP_ for $techmap\utx1.$0\tx_shift[7:0] [5] -> \utx1.tx_shift [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$950 to $_DFFE_PP_ for $techmap\utx1.$0\tx_shift[7:0] [6] -> \utx1.tx_shift [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$951 to $_DFFE_PP_ for $techmap\utx1.$0\tx_shift[7:0] [7] -> \utx1.tx_shift [7].

2.35. Executing TECHMAP pass (map to technology primitives).

2.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.35.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~85 debug messages>

2.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~133 debug messages>

2.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$463.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$469.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$469.slice[15].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$472.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$472.slice[14].carry ($lut).

2.38. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1218 (SB_DFF): \utx1.tickgen.acc [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$955 (SB_DFF): \utx1.tx_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1182 (SB_DFF): \urx1.tickgen.acc [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1183 (SB_DFF): \urx1.tickgen.acc [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1184 (SB_DFF): \urx1.tickgen.acc [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1185 (SB_DFF): \urx1.tickgen.acc [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1186 (SB_DFF): \urx1.tickgen.acc [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1187 (SB_DFF): \urx1.tickgen.acc [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1188 (SB_DFF): \urx1.tickgen.acc [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1189 (SB_DFF): \urx1.tickgen.acc [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1190 (SB_DFF): \urx1.tickgen.acc [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1191 (SB_DFF): \urx1.tickgen.acc [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1192 (SB_DFF): \urx1.tickgen.acc [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1193 (SB_DFF): \urx1.tickgen.acc [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1194 (SB_DFF): \urx1.tickgen.acc [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1195 (SB_DFF): \urx1.tickgen.acc [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1196 (SB_DFF): \urx1.tickgen.acc [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1197 (SB_DFF): \urx1.tickgen.acc [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1204 (SB_DFF): \utx1.tickgen.acc [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1205 (SB_DFF): \utx1.tickgen.acc [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1206 (SB_DFF): \utx1.tickgen.acc [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$952 (SB_DFF): \utx1.tx_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1207 (SB_DFF): \utx1.tickgen.acc [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1209 (SB_DFF): \utx1.tickgen.acc [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1210 (SB_DFF): \utx1.tickgen.acc [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1211 (SB_DFF): \utx1.tickgen.acc [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1212 (SB_DFF): \utx1.tickgen.acc [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1213 (SB_DFF): \utx1.tickgen.acc [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1214 (SB_DFF): \utx1.tickgen.acc [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1215 (SB_DFF): \utx1.tickgen.acc [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1216 (SB_DFF): \utx1.tickgen.acc [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1217 (SB_DFF): \utx1.tickgen.acc [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$602 (SB_DFFE): \urx1.filter_cnt [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$599 (SB_DFFE): \urx1.rx_sync [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$596 (SB_DFF): \data_flag = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$597 (SB_DFF): \data_check_busy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$598 (SB_DFFE): \urx1.rx_sync [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$600 (SB_DFFE): \urx1.rx_bit = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$604 (SB_DFFE): \urx1.os_cnt [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$601 (SB_DFFE): \urx1.filter_cnt [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$605 (SB_DFFE): \urx1.os_cnt [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$607 (SB_DFF): \urx1.rx_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$603 (SB_DFFE): \urx1.os_cnt [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$608 (SB_DFF): \urx1.rx_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$609 (SB_DFF): \urx1.rx_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$606 (SB_DFF): \urx1.rx_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1208 (SB_DFF): \utx1.tickgen.acc [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$944 (SB_DFFE): \utx1.tx_shift [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$945 (SB_DFFE): \utx1.tx_shift [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$946 (SB_DFFE): \utx1.tx_shift [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$947 (SB_DFFE): \utx1.tx_shift [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$948 (SB_DFFE): \utx1.tx_shift [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$949 (SB_DFFE): \utx1.tx_shift [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$951 (SB_DFFE): \utx1.tx_shift [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$950 (SB_DFFE): \utx1.tx_shift [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$953 (SB_DFF): \utx1.tx_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$954 (SB_DFF): \utx1.tx_state [2] = 0

2.39. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$1236 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$2415, S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1218 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1222 (A=1'1, B=$auto$simplemap.cc:309:simplemap_lut$2396, S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1204 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1223 (A=1'0, B=$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268_Y [4], S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1205 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1224 (A=1'1, B=$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268_Y [5], S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1206 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1225 (A=1'1, B=$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268_Y [6], S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1207 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1227 (A=1'1, B=$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268_Y [8], S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1209 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1228 (A=1'0, B=$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268_Y [9], S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1210 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1229 (A=1'0, B=$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268_Y [10], S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1211 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1230 (A=1'0, B=$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268_Y [11], S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1212 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1231 (A=1'0, B=$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268_Y [12], S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1213 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1232 (A=1'0, B=$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268_Y [13], S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1214 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1233 (A=1'0, B=$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268_Y [14], S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1215 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1234 (A=1'0, B=$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268_Y [15], S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1216 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1235 (A=1'0, B=$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268_Y [16], S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1217 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$870 (A=1'0, B=$techmap\urx1.$add$uart_rx.v:92$235_Y [1], S=$auto$simplemap.cc:168:logic_reduce$883) into $auto$simplemap.cc:420:simplemap_dff$604 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$871 (A=1'0, B=$techmap\urx1.$add$uart_rx.v:92$235_Y [2], S=$auto$simplemap.cc:168:logic_reduce$883) into $auto$simplemap.cc:420:simplemap_dff$605 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1252 (A=1'0, B=$techmap$techmap\urx1.$procmux$341.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$822_Y, S=$techmap$techmap\urx1.$procmux$341.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$808_Y) into $auto$simplemap.cc:420:simplemap_dff$607 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$869 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$2339, S=$auto$simplemap.cc:168:logic_reduce$883) into $auto$simplemap.cc:420:simplemap_dff$603 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1253 (A=1'0, B=$techmap$techmap\urx1.$procmux$341.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$823_Y, S=$techmap$techmap\urx1.$procmux$341.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$808_Y) into $auto$simplemap.cc:420:simplemap_dff$608 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1254 (A=1'0, B=$techmap$techmap\urx1.$procmux$341.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$824_Y, S=$techmap$techmap\urx1.$procmux$341.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$808_Y) into $auto$simplemap.cc:420:simplemap_dff$609 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1251 (A=1'0, B=$techmap$techmap\urx1.$procmux$341.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$821_Y, S=$techmap$techmap\urx1.$procmux$341.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$808_Y) into $auto$simplemap.cc:420:simplemap_dff$606 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1226 (A=1'0, B=$techmap\utx1.tickgen.$add$uart_baud_tick_gen.v:43$268_Y [7], S=$auto$simplemap.cc:168:logic_reduce$1177) into $auto$simplemap.cc:420:simplemap_dff$1208 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1161 (A=1'0, B=\tx1_data [7], S=$techmap\utx1.$and$uart_tx.v:59$212_Y) into $auto$simplemap.cc:420:simplemap_dff$951 (SB_DFFE).

2.40. Executing ICE40_OPT pass (performing simple optimizations).

2.40.1. Running ICE40 specific optimizations.

2.40.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~99 debug messages>

2.40.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~381 debug messages>
Removed a total of 127 cells.

2.40.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.40.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 27 unused cells and 566 unused wires.
<suppressed ~28 debug messages>

2.40.6. Rerunning OPT passes. (Removed registers in this run.)

2.40.7. Running ICE40 specific optimizations.

2.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

2.40.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.40.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.40.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.40.12. Rerunning OPT passes. (Removed registers in this run.)

2.40.13. Running ICE40 specific optimizations.

2.40.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.40.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.40.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.40.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.40.18. Finished OPT passes. (There is nothing left to do.)

2.41. Executing TECHMAP pass (map to technology primitives).

2.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.41.2. Continuing TECHMAP pass.
No more expansions possible.

2.42. Executing ABC pass (technology mapping using ABC).

2.42.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 357 gates and 400 wires to a netlist network with 41 inputs and 40 outputs.

2.42.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      46.
ABC: Participating nodes from both networks       =     143.
ABC: Participating nodes from the first network   =      45. (  77.59 % of nodes)
ABC: Participating nodes from the second network  =      98. ( 168.97 % of nodes)
ABC: Node pairs (any polarity)                    =      45. (  77.59 % of names can be moved)
ABC: Node pairs (same polarity)                   =      42. (  72.41 % of names can be moved)
ABC: Total runtime =     0.04 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.42.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       57
ABC RESULTS:        internal signals:      319
ABC RESULTS:           input signals:       41
ABC RESULTS:          output signals:       40
Removing temp directory.

2.43. Executing ICE40_WRAPCARRY pass (wrap carries).

2.44. Executing TECHMAP pass (map to technology primitives).

2.44.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.44.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 1 unused cells and 236 unused wires.

2.45. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       86
  1-LUT                8
  2-LUT               11
  3-LUT               49
  4-LUT               18
  with \SB_CARRY      28

Eliminating LUTs.
Number of LUTs:       86
  1-LUT                8
  2-LUT               11
  3-LUT               49
  4-LUT               18
  with \SB_CARRY      28

Combining LUTs.
Number of LUTs:       86
  1-LUT                8
  2-LUT               11
  3-LUT               49
  4-LUT               18
  with \SB_CARRY      28

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~283 debug messages>

2.46. Executing TECHMAP pass (map to technology primitives).

2.46.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.46.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111110001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010101010101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010000000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
No more expansions possible.
<suppressed ~541 debug messages>
Removed 0 unused cells and 172 unused wires.

2.47. Executing AUTONAME pass.
Renamed 1590 objects in module top (17 iterations).
<suppressed ~264 debug messages>

2.48. Executing HIERARCHY pass (managing design hierarchy).

2.48.1. Analyzing design hierarchy..
Top module:  \top

2.48.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.49. Printing statistics.

=== top ===

   Number of wires:                105
   Number of wire bits:            262
   Number of public wires:         105
   Number of public wire bits:     262
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                200
     SB_CARRY                       28
     SB_DFF                         23
     SB_DFFE                        39
     SB_DFFESR                       4
     SB_DFFSR                       15
     SB_DFFSS                        4
     SB_LUT4                        86
     SB_PLL40_PAD                    1

2.50. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.51. Executing JSON backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 5c90c6471e
CPU: user 9.60s system 0.07s, MEM: 39.68 MB total, 34.94 MB resident
Yosys 0.9+932 (git sha1 f8d5920a, gcc 8.3.0-6+rpi1 -fPIC -Os)
Time spent: 19% 20x opt_expr (1 sec), 15% 21x opt_clean (1 sec), ...
